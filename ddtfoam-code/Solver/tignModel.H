
/*
 * This file was generated automatically by FCNN 0.5.1 on 2019-05-03 15:30:21
 * Exported C function name (network evaluation): export_eval
 */

#include <math.h>

/* function declaration - network evaluation */
void export_eval(const double*, double*);
void export_eval2(const double*, double*);

/* ------------------------------------------------------------ */


static const double export_w[121] = {
 0.3605519117644777, 0.4077384998545229, 0.6284282878420232, -0.9143389624887356,
 -0.5553875652160459, -5.984127165764037, -0.455722353217676, 0.3913153363968839,
 -3.441368177439758, -1.994975595618189, -5.679646957445577, 0.03828414086248847,
 -0.01802417374491379, -2.524287532997202, 0.09125974635916342, 14.60451276808812,
 8.049276906280943, 0.1099624368174864, -0.2592677563422308, -0.1421014078161341,
 -1.156944507852274, 0.1574562056669474, 0.04278853697854033, -0.3424442621937649,
 -0.8539857004362114, 1.197635989679116, 0.520437960776587, -0.05283480229543475,
 0.2577044033294862, 0.07578048968322913, -8.50036287001878, -0.6039232517238405,
 0.7205948535624659, -7.538957761915579, 1.469622959828127, -3.882332078259774,
 0.2583695179318175, 0.01166742165002446, -0.7234054063158472, -0.9232359500687441,
 0.06300381774252731, -0.4217552941857353, 1.679220974931439, -15.14282807136859,
 0.2996804881245313, -3.775444799742052, 0.6683518425798528, 0.7237591452323432,
 -15.05454076227104, 5.21356699371734, -3.227129934190676, 1.609888035987906,
 9.712087062780533, -3.561043939403667, 6.450226886294557, -2.802400145744603,
 -55.91476294737576, -5.944844868743332, -1.33964154084617, -0.8382442473660792,
 0.2295270336020879, -13.00967072288076, 1.668870604443128, -1.346793188932161,
 2.790334819643509, -0.4021609126496905, -7.495433680972579, 1.037833050988282,
 4.92072627855698, -1675.227410230044, 2740.630616374878, -1.820074800870678,
 -162.1481787264221, 5.229143940370367, -23650.20604587832, 744.6529846732594,
 -0.1356817659880959, 1.476736892931491, -0.1646304893924913, -15.89688035254533,
 2.02308530883925, -0.09878317796764699, 1.537835649765813, -0.6324114940136465,
 -5.019606768117274, -0.1381383989784463, -0.9175137486682694, 0.1242968459547298,
 11.05208223456056, -0.4264532157465431, 1.977717956928682, -4.136345506082072,
 -9.527760456503168, -2.113480030689425, 0.2681437049861769, 0.07727218511020773,
 -0.5659014596715101, -28.64322091816193, -0.1837578221224383, -2.04379826163583,
 -0.08729398027324019, -0.4173005459218339, 7.354463344537324, -0.6615230811819196,
 0.8987555789539862, -15.20393045679347, -55.95125252601009, 0.5894717292418451,
 -15.43494496352807, -1.031201169394349, 0.487037766064835, 25.80169677859489,
 3.740198831001676, -4.543453642224442, -2.002471687337099, -5.665435811690173,
 -13.34383389376399, -8.095293096496407, -24.0333816767765, -5.016047535330553,
 -12.16065600781396
};

static const double export_w2[31] = {
 6.174077987670898, 0.05206200480461121, 0.0990847647190094, 5.872896194458008,
 6.120541095733643, 0.05223545432090759, 0.09891455620527267, 5.839488506317139,
 6.249062061309814, 0.05179813504219055, 0.09931299835443497, 5.919907569885254,
 6.283548831939697, 0.05166753381490707, 0.09941153228282928, 5.941601276397705,
 6.277162075042725, 0.05169152840971947, 0.0993918851017952, 5.937563419342041,
 6.138086318969727, 0.05218108370900154, 0.09897401183843613, 5.850452423095703,
 -20.04983520507812, 13.57680511474609, 13.43063163757324, 13.78648376464844,
 13.85600471496582, 13.84361267089844, 13.48481178283691
};


double export_eval (const double *input)
{
    double n[21];
    double x;
    double output;
    int k = 0, i = 0, j;

    for (; i < 4; ++i) n[i] = input[i];
    for (; i < 12; ++i) {
        x = export_w[k++];
        for (j = 0; j < 4; ++j) x += n[j] * export_w[k++];
        n[i] = (double)1 / ((double)1 + std::exp(-x));
    }
    for (; i < 20; ++i) {
        x = export_w[k++];
        for (j = 4; j < 12; ++j) x += n[j] * export_w[k++];
        n[i] = (double)1 / ((double)1 + std::exp(-x));
    }
    for (; i < 21; ++i) {
        x = export_w[k++];
        for (j = 12; j < 20; ++j) x += n[j] * export_w[k++];
        n[i] = x;
    }
    for (i = 0, j = 20; i < 1; ++i, ++j) output = n[j];

    return output;
}

double export_eval2(const double *input)
{
    double n[10];
    double x;
    double output;
    int k = 0, i = 0, j;

    for (; i < 3; ++i) n[i] = input[i];
    for (; i < 9; ++i) {
        x = export_w2[k++];
        for (j = 0; j < 3; ++j) x += n[j] * export_w2[k++];
        n[i] = (double)1 / ((double)1 + std::exp(-x));
    }
    for (; i < 10; ++i) {
        x = export_w2[k++];
        for (j = 3; j < 9; ++j) x += n[j] * export_w2[k++];
        n[i] = (double)1 / ((double)1 + std::exp(-x));
    }
    for (i = 0, j = 9; i < 1; ++i, ++j) output = n[j];

    return output;
}

Foam::scalar tign_model (Foam::scalar *coordinates)
{
    double input[4];
    input[0] = (coordinates[0] - 0.305344494887) / 0.172997365172;
    input[1] = (coordinates[1] - 5024677.71014) / 2935262.78171;
    input[2] = (coordinates[2] - 1643.55783841) / 506.180955637;
    input[3] = (std::log(input[1]) - 15.0694925066) / 1.19340100897;
    if (export_eval2(input) >= 0.5)
        return Foam::exp(export_eval(input));
    else
        return scalar(10.0);
}


